#include <ilcplex/ilocplex.h>
#include<chrono>
#include <iostream>
#include <fstream>
#include <map>
#include"EMS.h"
ILOSTLBEGIN


typedef IloArray<IloNumVarArray> NumVar2D;

int
main(int, char**)
{

    auto start = chrono::high_resolution_clock::now();
    IloEnv env;
    IloModel model(env);


#pragma region Microgrid Input Data

// Some Constants
 

int T = 24; //One day
int numEvs = 5; // Total Nmber of Electric vehicles

map<std::string, int> int_constant = {
        {"Cdg1", 135},
        {"Cdg2", 140},
        {"Chob", 80},
        {"Cchp1", 150},
        {"Cchp2", 145},
        {"Pbmax", 150},
        {"Hssmax", 50},
};


map<std::string, float> float_constant = {
        {"socini", 0.2},
        {"effin", 0.95},
        {"Eveffin", 0.90},
        {"k1", 1.2},
        {"k2", 0.8},
        {"Heffin", 0.95}
};


// Arrival and Departure time of Evs 
int* ta = new int[numEvs] {2,4,6,9,9};
int* td = new int[numEvs] {6, 7, 9, 12, 16};
float* evsocini = new float[numEvs] {0.30,0.20,0.10,0.70,0.40};
float* evcap = new float[numEvs] {38.3, 47.5, 28.9, 56, 52};
    
// Electric and Heat Demand 
//int* Pload = new int[T] {169, 175, 179, 171, 181, 172, 270, 264, 273, 281, 193, 158, 161, 162, 250, 260, 267, 271, 284, 167, 128, 134, 144, 150};  //Electicity demand w.r.t tim
int* Pload = new int[T] {169, 175, 179, 171, 181, 190, 270, 264, 273, 281, 300, 320, 280, 260, 250, 200, 180, 190, 240, 280, 325, 350, 300, 250};  //Electicity demand w.r.t tim
int* Hload = new int[T] {130, 125, 120, 120, 125, 135, 150, 160, 175, 190, 195, 200, 195, 195, 180, 170, 185, 190, 195, 200, 195, 190, 180, 175};  //Heat Demand
int* Cload = new int[T] {100, 100, 80, 100, 120, 135, 150, 135, 125, 130, 140, 150, 150, 130, 120, 110, 90, 80, 135, 150, 135, 140, 110, 125};  //Heat Demand


// Trading Prices Electric and Heat
int* CGbuy = new int[T] { 138, 139, 143, 149, 150, 152, 155, 158, 160, 154, 153, 153, 152, 150, 149, 149, 154, 156, 163, 164, 164, 160, 150, 148};  //buying price of electricity
int* CGsell = new int[T] { 128, 129, 133, 139, 140, 142, 145, 148, 150, 144, 143, 143, 142, 140, 139, 139, 144, 146, 153, 154, 154, 150, 140, 138}; //selling price of electricity
int* CHbuy = new int[T] {77, 77, 77, 77, 77, 77, 77, 77, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 78, 78, 78, 78, 78, 78}; // buying price of heat
int* CHsell = new int[T] {75, 75, 75, 75, 75, 75, 75, 75, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 78, 78, 78, 78, 78, 78 }; // selling price of heat

// Renewable Infeeds
float* Rdg1 = new float[T] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, 15, 20, 23, 28, 33, 35, 34, 31, 28, 10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }; //Power generated by PV w.r.t time
//float* Rdg2 = new float[T] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, 15, 20, 23, 28, 33, 35, 34, 31, 28, 10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }; //Power generated by PV w.r.t time

#pragma endregion


EMS microgrid(T, numEvs, int_constant, float_constant, ta, td, evsocini, evcap, Pload, Hload, Cload, CGbuy, CGsell, CHbuy, CHsell, Rdg1);
microgrid.solve();


return 1;

}